    <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}  className="space-y-8 w-full">
        <FormField
                 control={form.control}
                 name = "images"
                 render = {({field}) => (
                    <FormItem>
                        <FormLabel> Images</FormLabel>
                        <FormControl>
                            <ImageUpload
                            /* burda imageleri dönüp imagelerin urllerini value yapıyoz 
                            imagelerde array of stringsle çalışınca onalrı dönüp tek tek stringleri dönmemiz lazım   */
                             value={field.value.map((image) => image.url)}
                              disabled = {loading}
                              onChange={(url) => field.onChange([...field.value,{url}])}/* burda existing valueya urli ekliyoz */
                             onRemove = {(url) =>field.onChange([...field.value.filter((current) => current.url !== url)])}
                            /* on removeda direk işte silme mevzusunu yapıyoz removladığımız dışındaki listeyi dönüyor  */
                            />
                            
                        </FormControl>
                        <FormMessage/>
                    </FormItem>
                    
)}
/>
            <div className = "grid grid-cols-3 gap-8">
                <FormField
                 control={form.control}
                 name = "name"
                 render = {({field}) => (
                    <FormItem>
                        <FormLabel>Name</FormLabel>
                        <FormControl>
                            <Input disabled = {loading} placeholder="Product name" {...field}/>
                        </FormControl>
                        <FormMessage/>
                    </FormItem>
)}
/>
                <FormField
                 control={form.control}
                 name = "price"
                 render = {({field}) => (
                    <FormItem>
                        <FormLabel>Price</FormLabel>
                        <FormControl>
                            <Input type="number" disabled = {loading} placeholder="9.99" {...field}/>
                        </FormControl>
                        <FormMessage/>
                    </FormItem>
)}
/>
     
              
<FormField
          /* bunu category componentından aldık  */
          control={form.control}
                 name = "categoryId"
                 render = {({field}) => (
                    <FormItem>
                        <FormLabel>Category</FormLabel>
                       <Select disabled = {loading} onValueChange={field.onChange} value={field.value} defaultValue={field.value}>
                    <FormControl>
                        <SelectTrigger >
                        <SelectValue defaultValue={field.value} placeholder = "Select A Category">

                        </SelectValue>
                        </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                         {categories.map((category) => (
                            <SelectItem
                            key={category.id}
                            value={category.id}>
                                {category.name}
                            </SelectItem>
                         ))}
                    </SelectContent>
                       </Select>
                        <FormMessage/>
                    </FormItem>
)}
/>


<FormField
                 control={form.control}
                 name = "isFeatured"
                 render = {({field}) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                      <FormControl>
                        <Checkbox
                        checked = {field.value}
                        /* alttakini yazınca burda hata vardı onu */
                        //@ts-ignore
                        onCheckedChange={field.onChange}/>
                      </FormControl>
                      <div className="space-y-1 leading-none">
                        <FormLabel>
                            Featured
                        </FormLabel>
                        <FormDescription>
                            This Product Will Appear on the home page
                        </FormDescription>
                      </div>
                    </FormItem>
)}
/>
<FormField
                 control={form.control}
                 name = "isArchived"
                 render = {({field}) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                      <FormControl>
                        <Checkbox
                        checked = {field.value}
                        //@ts-ignore
                        onCheckedChange={field.onChange}/>
                      </FormControl>
                      <div className="space-y-1 leading-none">
                        <FormLabel>
                            Archived
                        </FormLabel>
                        <FormDescription>
                            This Product Will not appear anywhere in the store
                        </FormDescription>
                      </div>
                    </FormItem>
)}
/>
            </div>
        <Button disabled = {loading}  className="ml-auto" type="submit">
  {action}
        </Button>
        </form>
    </Form>